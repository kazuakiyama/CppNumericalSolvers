// -*-c++-*-
// This file is part of Eigen, a lightweight C++ template library
// for linear algebra. 
//
// The MIT License (MIT)
// 
// Copyright (c) 2006 Jeffrey A. Fike
// Copyright (C) 2015 Michael Tesch tesch a tum de
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
// 
//
#ifndef EIGEN_DUALNUM_MODULE
#define EIGEN_DUALNUM_MODULE

namespace Eigen {

/**
  * \defgroup DualNum_Module Dual/HyperDual Numbers module
  *
  * \code
  * #include <unsupported/Eigen/DualNum>
  * \endcode
  *
  * This module provides Dual numbers and Hyper-Dual numbers
  *
  * This implementation is based on code from Jeffrey Fike here: http://adl.stanford.edu/hyperdual/
  *
  * \section DualDesign Design
  *
  * The intent is to facilitate first and second-order automatic differentiation.
  * The intent is to provide support for the following types of Matrix elements in Eigen:
  *
  * \code
  *  DualNum<float>
  *  DualNum<double>
  *  DualNum<std::complex<float> >
  *  DualNum<std::complex<double> >
  *  HyperDual<float>
  *  HyperDual<double>
  *  HyperDual<std::complex<float> >
  *  HyperDual<std::complex<double> >
  * \endcode
  *
  */
//@{

}

#include "src/DualNum/DualNum.h"
//#include "src/DualNum/HyperDual.h"

namespace Eigen {

typedef DualNum<float> Dualf;
typedef DualNum<double> Duald;
typedef DualNum<std::complex<float> > Dualcf;
typedef DualNum<std::complex<double> > Dualcd;

//@}
}


#endif // EIGEN_DUALNUM_MODULE
